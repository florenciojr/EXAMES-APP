const express = require('express');
const QuestionHistory = require('../models/QuestionHistory');
const router = express.Router();


// Estat√≠sticas do usu√°rio
router.get('/user/:userId/stats', async (req, res) => {
  try {
    const userId = req.params.userId;
    console.log('üìä Buscando estat√≠sticas para usu√°rio:', userId);
    
    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'userId √© obrigat√≥rio'
      });
    }
    
    const stats = await QuestionHistory.getUserStats(userId);
    const subjectStats = await QuestionHistory.getStatsBySubject(userId);
    
    console.log('‚úÖ Estat√≠sticas encontradas:', stats);
    
    res.json({
      success: true,
      data: {
        ...stats,
        by_subject: subjectStats
      }
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar estat√≠sticas:', error);
    res.status(500).json({
      success: false,
      message: 'Erro ao buscar estat√≠sticas',
      error: error.message
    });
  }
});

// Estat√≠sticas via query parameter (alternativa)
router.get('/stats', async (req, res) => {
  try {
    const userId = req.query.userId;
    console.log('üìä Buscando estat√≠sticas via query para usu√°rio:', userId);
    
    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'userId √© obrigat√≥rio (use /user/:userId/stats ou ?userId=)'
      });
    }
    
    const stats = await QuestionHistory.getUserStats(userId);
    const subjectStats = await QuestionHistory.getStatsBySubject(userId);
    
    res.json({
      success: true,
      data: {
        ...stats,
        by_subject: subjectStats
      }
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar estat√≠sticas:', error);
    res.status(500).json({
      success: false,
      message: 'Erro ao buscar estat√≠sticas',
      error: error.message
    });
  }
});



// Health check da rota
router.get('/health', (req, res) => {
  console.log('‚úÖ Health check da rota de hist√≥rico');
  res.json({
    success: true,
    message: 'Rota de hist√≥rico funcionando',
    timestamp: new Date().toISOString()
  });
});

// Salvar hist√≥rico de quest√µes
router.post('/save-history', async (req, res) => {
  try {
    console.log('=== üì• DADOS RECEBIDOS NO /save-history ===');
    console.log('Body completo:', JSON.stringify(req.body, null, 2));
    
    // Aceitar ambos os formatos: camelCase e snake_case
    const {
      user_id, userId,
      exam_type, examType,  
      questions,
      score,
      total_questions, totalQuestions,
      time_spent, timeSpent
    } = req.body;
    
    // Usar snake_case como padr√£o, fallback para camelCase
    const sanitizedData = {
      user_id: user_id || userId || null,
      exam_type: exam_type || examType || 'Exame Desconhecido',
      score: score !== undefined ? score : 0,
      total_questions: total_questions || totalQuestions || 0,
      time_spent: time_spent || timeSpent || 0,
      questions: questions && Array.isArray(questions) ? questions : []
    };
    
    console.log('‚úÖ Dados sanitizados:', sanitizedData);
    
    // Validar campos obrigat√≥rios
    if (sanitizedData.user_id === null) {
      console.log('‚ùå user_id √© obrigat√≥rio');
      return res.status(400).json({ 
        success: false,
        message: 'user_id √© obrigat√≥rio' 
      });
    }

    if (!sanitizedData.exam_type) {
      console.log('‚ùå exam_type √© obrigat√≥rio');
      return res.status(400).json({ 
        success: false,
        message: 'exam_type √© obrigat√≥rio' 
      });
    }
    
    console.log('‚úÖ Campos v√°lidos, criando hist√≥rico...');
    
    // Criar hist√≥rico
    const historyId = await QuestionHistory.create(sanitizedData);
    
    console.log('‚úÖ Hist√≥rico criado com ID:', historyId);
    
    // Adicionar quest√µes ao hist√≥rico
    if (sanitizedData.questions.length > 0) {
      await QuestionHistory.addQuestions(historyId, sanitizedData.questions);
      console.log(`‚úÖ ${sanitizedData.questions.length} quest√µes adicionadas`);
    }
    
    console.log('üéâ Hist√≥rico salvo com sucesso!');
    
    res.status(201).json({ 
      success: true,
      message: 'Hist√≥rico salvo com sucesso',
      historyId 
    });

  } catch (error) {
    console.error('‚ùå ERRO em /save-history:');
    console.error('Mensagem:', error.message);
    console.error('Stack:', error.stack);
    res.status(500).json({ 
      success: false,
      message: 'Erro interno do servidor',
      error: error.message 
    });
  }
});

// Buscar hist√≥rico por usu√°rio
router.get('/user/:userId', async (req, res) => {
  try {
    const userId = req.params.userId;
    console.log('üìã Buscando hist√≥rico para usu√°rio:', userId);
    
    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'userId √© obrigat√≥rio'
      });
    }
    
    const history = await QuestionHistory.findByUserId(userId);
    
    console.log(`‚úÖ ${history.length} registros encontrados para usu√°rio ${userId}`);
    
    res.json({
      success: true,
      data: history,
      count: history.length
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar hist√≥rico:', error);
    res.status(500).json({
      success: false,
      message: 'Erro ao buscar hist√≥rico',
      error: error.message
    });
  }
});

// Buscar hist√≥rico (rota alternativa para compatibilidade)
router.get('/', async (req, res) => {
  try {
    const userId = req.query.userId;
    console.log('üìã Buscando hist√≥rico via query para usu√°rio:', userId);
    
    if (!userId) {
      return res.status(400).json({
        success: false,
        message: 'userId √© obrigat√≥rio (use /user/:userId ou ?userId=)'
      });
    }
    
    const history = await QuestionHistory.findByUserId(userId);
    
    console.log(`‚úÖ ${history.length} registros encontrados para usu√°rio ${userId}`);
    
    res.json({
      success: true,
      data: history,
      count: history.length
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar hist√≥rico:', error);
    res.status(500).json({
      success: false,
      message: 'Erro ao buscar hist√≥rico',
      error: error.message
    });
  }
});

module.exports = router;